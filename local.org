#+Title: [MACHINE NAME HERE]
This is the template for local emacs configurations.


* ESS
The configuration for this differs by system
#+BEGIN_SRC emacs-lisp
    (add-to-list 'load-path "~/.emacs.d/ESS-17.11/lisp/")
    (load "ess-site")
#+END_SRC


#+BEGIN_SRC emacs-lisp
  ;; thus allows some templating for org-roam to work
  ;; -*- lexical-binding: t; -*-

* Org Roam

#+BEGIN_SRC  emacs-lisp
	 (use-package org-roam
	   :ensure t
	   :init
	   (setq org-roam-v2-ack t)
	   :custom
	   (org-roam-directory "~/RoamNotes")
	   (org-roam-completion-everywhere t)
	   (org-roam-capture-templates
	    '(("d" "default" plain
	       "%?"
	       :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n")
	       :unnarrowed t)
	      ("r" "references" plain
	       "* Summary\nTitle: \n\n- Found by: \n\n* Reference:\n\n-"
	       :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n\n#+filetags: :Papers:AUTHORS")
	       :unnarrowed t)
	      ("p" "project" plain "* Goals\n\n%?\n\n* Tasks\n\n** TODO Add initial tasks\n\n* Dates\n\n"
	       :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n#+category: ${title}\n#+filetags: Project")
	       :unnarrowed t)
	      ))
	   (org-roam-dailies-capture-templates
	    '(("d" "default" entry "* %<%I:%M %p>: %?"
	       :if-new (file+head "%<%Y-%m-%d>.org" "#+title: %<%Y-%m-%d>\n"))))
	   :bind (("C-c n l" . org-roam-buffer-toggle)
		  ("C-c n f" . org-roam-node-find)
		  ("C-c n i" . org-roam-node-insert)
		  :map org-mode-map
		  ("C-M-i" . completion-at-point)
		  :map org-roam-dailies-map
		  ("Y" . org-roam-dailies-capture-yesterday)
		  ("T" . org-roam-dailies-capture-tomorrow))
	   :bind-keymap
	   ("C-c n d" . org-roam-dailies-map)
	   :config
	   (require 'org-roam-dailies) ;; Ensure the keymap is available
	   (org-roam-db-autosync-mode))


						 ; Enable vertico
	 (use-package vertico
	   :demand t
	   :bind (:map vertico-map
		       ("C-j" . vertico-next)
		       ("C-k" . vertico-previous)
		       ("C-f" . vertico-exit-input)
		       :map minibuffer-local-map
		       ("M-h" . vertico-directory-up))
	   :custom
	   (vertico-cycle t)

	   :custom-face
	   (vertico-current ((t (:background "#3a3f5a"))))

	   :config
	   (require 'vertico-directory)
	   (vertico-mode))

	 ;; Persist history over Emacs restarts. Vertico sorts by history position.
	 (use-package savehist
	   :init
	   (savehist-mode))

	 ;; A few more useful configurations...
	 (use-package emacs
	   :custom
	   ;; Support opening new minibuffers from inside existing minibuffers.
	   (enable-recursive-minibuffers t)
	   ;; Hide commands in M-x which do not work in the current mode.  Vertico
	   ;; commands are hidden in normal buffers. This setting is useful beyond
	   ;; Vertico.
	   (read-extended-command-predicate #'command-completion-default-include-p)
	   :init
	   ;; Add prompt indicator to `completing-read-multiple'.
	   ;; We display [CRM<separator>], e.g., [CRM,] if the separator is a comma.
	   (defun crm-indicator (args)
	     (cons (format "[CRM%s] %s"
			   (replace-regexp-in-string
			    "\\`\\[.*?]\\*\\|\\[.*?]\\*\\'" ""
			    crm-separator)
			   (car args))
		   (cdr args)))
	   (advice-add #'completing-read-multiple :filter-args #'crm-indicator)

	   ;; Do not allow the cursor in the minibuffer prompt
	   (setq minibuffer-prompt-properties
		 '(read-only t cursor-intangible t face minibuffer-prompt))
	   (add-hook 'minibuffer-setup-hook #'cursor-intangible-mode))



	 ;;  (setq org-roam-node-display-template "${directory:10} ${tags:10} ${title:100} ${backlinkscount:6}")
	 ;; Enable rich annotations using the Marginalia package
	 (use-package marginalia
	   :after vertico
	   :custom
	   (marginalia-annotators '(marginalia-annotators-heavy
				    marginalia-annotators-light
				    nil))
	   :config
	   (marginalia-mode))
	 (setq org-roam-node-display-template (concat "${title:*} " (propertize "${tags:10}" 'face 'org-tag)))

	(require 'org-roam-node)
	 ;; All this from https://systemcrafters.net/build-a-second-brain-in-emacs/5-org-roam-hacks/
	 (defun my/org-roam-filter-by-tag (tag-name)
	   (lambda (node)
	     (member tag-name (org-roam-node-tags node))))


	(defun my/org-roam-list-notes-by-tag (tag-name)
	   (mapcar #'org-roam-node-file
		   (seq-filter
		    (my/org-roam-filter-by-tag tag-name)
		    (org-roam-node-list))))

	 (defun my/org-roam-refresh-agenda-list ()
	   (interactive)
	   (setq org-agenda-files (my/org-roam-list-notes-by-tag "Project")))

	 ;; Build the agenda list the first time for the session
	 (my/org-roam-refresh-agenda-list)

	 (defun my/org-roam-project-finalize-hook ()
	   "Adds the captured project file to `org-agenda-files' if the
	   capture was not aborted."
	   ;; Remove the hook since it was added temporarily
	   (remove-hook 'org-capture-after-finalize-hook #'my/org-roam-project-finalize-hook)

	   ;; Add project file to the agenda list if the capture was confirmed
	   (unless org-note-abort
	     (with-current-buffer (org-capture-get :buffer)
	       (add-to-list 'org-agenda-files (buffer-file-name)))))

	 (defun my/org-roam-find-project ()
	   (interactive)
	   ;; Add the project file to the agenda after capture is finished
	   (add-hook 'org-capture-after-finalize-hook #'my/org-roam-project-finalize-hook)

	   ;; Select a project file to open, creating it if necessary
	   (org-roam-node-find
	    nil
	    nil
	    (my/org-roam-filter-by-tag "Project")
	    :templates
	    '(("p" "project" plain "* Goals\n\n%?\n\n* Tasks\n\n** TODO Add initial tasks\n\n* Dates\n\n"
	       :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n#+category: ${title}\n#+filetags: Project")
	       :unnarrowed t))))
  (defun my/org-roam-node-has-tag (node tag)
    "Filter function to check if the given NODE has the specified TAG."
    (member tag (org-roam-node-tags node)))

  (defun my/org-roam-node-find-by-tag ()
    "Find and open an Org-roam node based on a specified tag."
    (interactive)
    (let ((tag (read-string "Enter tag: ")))
      (org-roam-node-find nil nil (lambda (node) (my/org-roam-node-has-tag node tag)))))

  (global-set-key (kbd "C-c n p") #'my/org-roam-find-project)
  (global-set-key (kbd "C-c n t") #'my/org-roam-node-find-by-tag)

#+END_SRC

**** Keybindings

Bind a few handy keys.

#+BEGIN_SRC emacs-lisp
  (setq org-default-notes-file (concat org-directory "/notes.org"))
  (define-key global-map "\C-cl" 'org-store-link)
  (define-key global-map "\C-ca" 'org-agenda)
  (define-key global-map "\C-cc" 'org-capture)
#+END_SRC

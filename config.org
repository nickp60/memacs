#+Title:  My configs
* my initial .emacs file
#+BEGIN_SRC emacs-lisp
  ;; thus allows some templating for org-roam to work
  ;; -*- lexical-binding: t; -*-
  (setq TeX-command "/$HOME/bin/pdflatex")
  (set-face-attribute 'default nil :height 110)
  (custom-set-faces
   ;; custom-set-faces was added by Custom.
   ;; If you edit it by hand, you could mess it up, so be careful.
   ;; Your init file should contain only one such instance.
   ;; If there is more than one, they won't work right.
   )
  (custom-set-variables
   '(TeX-engine (quote xetex))
   '(ansi-color-names-vector ["black" "#d55e00" "#009e73" "#f8ec59" "#0072b2" "#cc79a7" "#56b4e9" "white"])
   ;; '(bar-cursor-mode nil nil (bar-cursor))
   '(custom-enabled-themes (quote (manoj-dark)))
   '(inhibit-startup-buffer-menu t)
   '(org-confirm-babel-evaluate nil)
   '(inhibit-startup-screen t))
  ;; for autocomplete
  (require 'package) ;; You might already have this line
  (add-to-list 'package-archives
	       '("melpa" . "https://melpa.org/packages/") t)
  (when (< emacs-major-version 24)
    ;; For important compatibility libraries like cl-lib
    (add-to-list 'package-archives '("gnu" . "http://elpa.gnu.org/packages/")))
  ;;actually calling it
  (ac-config-default)
	;;;;
  ;; (add-to-list 'load-path "~/.emacs.d/auto-complete-auctex")
  ;; (require 'auto-complete-auctex)
  (setq TeX-parse-self t) ; Enable parse on load. allows for bibtex auti running
  (setq TeX-auto-save t) ; Enable parse on save.
  ;;workgroups; desktop didnt save enough
  (add-to-list 'load-path "~/.emacs.d/various")
  (column-number-mode 1)

  ;; always get rid of training white space
  (add-hook 'before-save-hook 'delete-trailing-whitespace)


  ;; Setup for Flymake code checking.

  (require 'flymake)


  ;; Highlight character at "fill-column" position.
  (require 'column-marker)
  (setq-default fill-column 79)
  (set-face-background 'column-marker-1 "red")
  (add-hook 'python-mode-hook
	    (lambda () (interactive)
	      (column-marker-1 fill-column)))
#+END_SRC

* Org Roam

#+BEGIN_SRC  emacs-lisp
	 (use-package org-roam
	   :ensure t
	   :init
	   (setq org-roam-v2-ack t)
	   :custom
	   (org-roam-directory "~/RoamNotes")
	   (org-roam-completion-everywhere t)
	   (org-roam-capture-templates
	    '(("d" "default" plain
	       "%?"
	       :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n")
	       :unnarrowed t)
	      ("r" "references" plain
	       "* Summary\nTitle: \n\n- Found by: \n\n* Reference:\n\n-"
	       :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n\n#+filetags: :Papers:AUTHORS")
	       :unnarrowed t)
	      ("p" "project" plain "* Goals\n\n%?\n\n* Tasks\n\n** TODO Add initial tasks\n\n* Dates\n\n"
	       :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n#+category: ${title}\n#+filetags: Project")
	       :unnarrowed t)
	      ))
	   (org-roam-dailies-capture-templates
	    '(("d" "default" entry "* %<%I:%M %p>: %?"
	       :if-new (file+head "%<%Y-%m-%d>.org" "#+title: %<%Y-%m-%d>\n"))))
	   :bind (("C-c n l" . org-roam-buffer-toggle)
		  ("C-c n f" . org-roam-node-find)
		  ("C-c n i" . org-roam-node-insert)
		  :map org-mode-map
		  ("C-M-i" . completion-at-point)
		  :map org-roam-dailies-map
		  ("Y" . org-roam-dailies-capture-yesterday)
		  ("T" . org-roam-dailies-capture-tomorrow))
	   :bind-keymap
	   ("C-c n d" . org-roam-dailies-map)
	   :config
	   (require 'org-roam-dailies) ;; Ensure the keymap is available
	   (org-roam-db-autosync-mode))


						 ; Enable vertico
	 (use-package vertico
	   :demand t
	   :bind (:map vertico-map
		       ("C-j" . vertico-next)
		       ("C-k" . vertico-previous)
		       ("C-f" . vertico-exit-input)
		       :map minibuffer-local-map
		       ("M-h" . vertico-directory-up))
	   :custom
	   (vertico-cycle t)

	   :custom-face
	   (vertico-current ((t (:background "#3a3f5a"))))

	   :config
	   (require 'vertico-directory)
	   (vertico-mode))

	 ;; Persist history over Emacs restarts. Vertico sorts by history position.
	 (use-package savehist
	   :init
	   (savehist-mode))

	 ;; A few more useful configurations...
	 (use-package emacs
	   :custom
	   ;; Support opening new minibuffers from inside existing minibuffers.
	   (enable-recursive-minibuffers t)
	   ;; Hide commands in M-x which do not work in the current mode.  Vertico
	   ;; commands are hidden in normal buffers. This setting is useful beyond
	   ;; Vertico.
	   (read-extended-command-predicate #'command-completion-default-include-p)
	   :init
	   ;; Add prompt indicator to `completing-read-multiple'.
	   ;; We display [CRM<separator>], e.g., [CRM,] if the separator is a comma.
	   (defun crm-indicator (args)
	     (cons (format "[CRM%s] %s"
			   (replace-regexp-in-string
			    "\\`\\[.*?]\\*\\|\\[.*?]\\*\\'" ""
			    crm-separator)
			   (car args))
		   (cdr args)))
	   (advice-add #'completing-read-multiple :filter-args #'crm-indicator)

	   ;; Do not allow the cursor in the minibuffer prompt
	   (setq minibuffer-prompt-properties
		 '(read-only t cursor-intangible t face minibuffer-prompt))
	   (add-hook 'minibuffer-setup-hook #'cursor-intangible-mode))



	 ;;  (setq org-roam-node-display-template "${directory:10} ${tags:10} ${title:100} ${backlinkscount:6}")
	 ;; Enable rich annotations using the Marginalia package
	 (use-package marginalia
	   :after vertico
	   :custom
	   (marginalia-annotators '(marginalia-annotators-heavy
				    marginalia-annotators-light
				    nil))
	   :config
	   (marginalia-mode))
	 (setq org-roam-node-display-template (concat "${title:*} " (propertize "${tags:10}" 'face 'org-tag)))

	(require 'org-roam-node)
	 ;; All this from https://systemcrafters.net/build-a-second-brain-in-emacs/5-org-roam-hacks/
	 (defun my/org-roam-filter-by-tag (tag-name)
	   (lambda (node)
	     (member tag-name (org-roam-node-tags node))))


	(defun my/org-roam-list-notes-by-tag (tag-name)
	   (mapcar #'org-roam-node-file
		   (seq-filter
		    (my/org-roam-filter-by-tag tag-name)
		    (org-roam-node-list))))

	 (defun my/org-roam-refresh-agenda-list ()
	   (interactive)
	   (setq org-agenda-files (my/org-roam-list-notes-by-tag "Project")))

	 ;; Build the agenda list the first time for the session
	 (my/org-roam-refresh-agenda-list)

	 (defun my/org-roam-project-finalize-hook ()
	   "Adds the captured project file to `org-agenda-files' if the
	   capture was not aborted."
	   ;; Remove the hook since it was added temporarily
	   (remove-hook 'org-capture-after-finalize-hook #'my/org-roam-project-finalize-hook)

	   ;; Add project file to the agenda list if the capture was confirmed
	   (unless org-note-abort
	     (with-current-buffer (org-capture-get :buffer)
	       (add-to-list 'org-agenda-files (buffer-file-name)))))

	 (defun my/org-roam-find-project ()
	   (interactive)
	   ;; Add the project file to the agenda after capture is finished
	   (add-hook 'org-capture-after-finalize-hook #'my/org-roam-project-finalize-hook)

	   ;; Select a project file to open, creating it if necessary
	   (org-roam-node-find
	    nil
	    nil
	    (my/org-roam-filter-by-tag "Project")
	    :templates
	    '(("p" "project" plain "* Goals\n\n%?\n\n* Tasks\n\n** TODO Add initial tasks\n\n* Dates\n\n"
	       :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n#+category: ${title}\n#+filetags: Project")
	       :unnarrowed t))))
  (defun my/org-roam-node-has-tag (node tag)
    "Filter function to check if the given NODE has the specified TAG."
    (member tag (org-roam-node-tags node)))

  (defun my/org-roam-node-find-by-tag ()
    "Find and open an Org-roam node based on a specified tag."
    (interactive)
    (let ((tag (read-string "Enter tag: ")))
      (org-roam-node-find nil nil (lambda (node) (my/org-roam-node-has-tag node tag)))))

  (global-set-key (kbd "C-c n p") #'my/org-roam-find-project)
  (global-set-key (kbd "C-c n t") #'my/org-roam-node-find-by-tag)
#+END_SRC



* UI preferences
*3* Disable window chrome

I don't usually use the menu or scroll bar, and they take up useful space.

#+BEGIN_SRC emacs-lisp
  (tool-bar-mode 0)
  (menu-bar-mode 1)
  (when window-system
    (scroll-bar-mode -1))
#+END_SRC



** Highlight the current line

=global-hl-line-mode= softly highlights the background color of the line
containing point. It makes it a bit easier to find point, and it's useful when
pairing or presenting code.

Also, because it remove syntax highlighting, it makes lots of other stuff a pain.

#+BEGIN_SRC emacs-lisp
  ;;  (when window-system
  ;;    (global-hl-line-mode))
#+END_SRC

#+RESULTS:


** Task and org-capture management

# Store my org files in =~/org=, maintain an inbox in Dropbox, define the location
# of an index file (my main todo list), and archive finished tasks in
# =~/org/archive.org=.

# #+BEGIN_SRC emacs-lisp
#   (setq org-directory "~/org")

#   (defun org-file-path (filename)
#     "Return the absolute address of an org file, given its relative name."
#     (concat (file-name-as-directory org-directory) filename))

#   ;;  (setq org-inbox-file "~/Dropbox/inbox.org")
#   (setq org-index-file (org-file-path "index.org"))
#   (setq org-archive-location
# 	(concat (org-file-path "archive.org") "::* From %s"))
# #+END_SRC

# I store all my todos in =~/org/index.org=, so I'd like to derive my agenda from
# there.

# #+BEGIN_SRC emacs-lisp
#   (setq org-agenda-files (list org-index-file))
# #+END_SRC

Hitting =C-c C-x C-s= will mark a todo as done and move it to an appropriate
place in the archive.

#+BEGIN_SRC emacs-lisp
  (defun hrs/mark-done-and-archive ()
    "Mark the state of an org-mode item as DONE and archive it."
    (interactive)
    (org-todo 'done)
    (org-archive-subtree))

  (define-key org-mode-map (kbd "C-c C-x C-s") 'hrs/mark-done-and-archive)
#+END_SRC

Record the time that a todo was archived.

#+BEGIN_SRC emacs-lisp
  (setq org-log-done 'time)
#+END_SRC

**** Capturing tasks

#+BEGIN_SRC emacs-lisp
  ;; (global-set-key (kbd "C-c c") 'org-capture)
  ;; (setq org-default-notes-file "~/org/index.org")

  ;; (setq org-agenda-files (list "~/org/index.org"))

#+end_SRC




**** Keybindings

Bind a few handy keys.

#+BEGIN_SRC emacs-lisp
  (setq org-default-notes-file (concat org-directory "/notes.org"))
  (define-key global-map "\C-cl" 'org-store-link)
  (define-key global-map "\C-ca" 'org-agenda)
  (define-key global-map "\C-cc" 'org-capture)
#+END_SRC


** Exporting

Allow export to markdown and beamer (for presentations).

#+BEGIN_SRC emacs-lisp
  (require 'ox-md)
  (require 'ox-beamer)
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (custom-set-faces
   '(default ((t (:height 110 :family "inconsolata")))))
#+END_SRC

#+BEGIN_SRC elisp
  ;;syntax highlight code blocks
  (setq org-src-fontify-natively t)
#+END_SRC
And lets get some color going
#+BEGIN_SRC
(require 'color)
(set-face-attribute 'org-block nil :background
                    (color-darken-name
                     (face-attribute 'default :background) 3))
(setq org-src-block-faces '(("emacs-lisp" (:background "#EEE2FF"))
                            ("python" (:background "#E5FFB8"))
                            ("sh" (:backgriynd "#AAFFBA"))))
#+END_SRC


**** Exporting to PDF

I want to produce PDFs with syntax highlighting in the code. The best way to do
that seems to be with the =minted= package, but that package shells out to
=pygments= to do the actual work. =pdflatex= usually disallows shell commands;
this enables that.

#+BEGIN_SRC emacs-lisp
  (setq org-latex-pdf-process
	'("pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
	  "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
	  "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"))
#+END_SRC

Include the =minted= package in all of my LaTeX exports.

#+BEGIN_SRC emacs-lisp
  (add-to-list 'org-latex-packages-alist '("" "minted"))
  (setq org-latex-listings 'minted)
#+END_SRC

* Set custom keybindings

Just a few handy functions.
Remap when working in terminal Emacs.

#+BEGIN_SRC emacs-lisp
  (define-key input-decode-map "\e[1;2A" [S-up])
#+END_SRC


#+BEGIN_SRC emacs-lisp
  (define-key org-mode-map "\M-q" 'toggle-truncate-lines)
#+END_SRC

* org mode babel stuff
#+BEGIN_SRC emacs-lisp
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((python . t)
     (R . t)))
#+END_SRC
#+BEGIN_SRC emacs-lisp
  (eval-after-load "org"
    '(require 'ox-gfm nil t)
    )
  (eval-after-load "org"
    '(setq org-reveal-root "file:///home/nicholas/.emacs.d/reveal.js-3.6.0/")
    )
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (require 'ox-publish)
  (setq org-publish-project-alist
	'(

	  ("org-blog"
	   ;; Path to your org files.
	   :base-directory "~/GitHub/nickp60.github.io//math/"
	   :base-extension "org"

	   ;; Path to your Jekyll project.
	   :publishing-directory "~/GitHub/nickp60.github.io/_posts/math/"
	   :recursive t
	   :publishing-function org-html-publish-to-html
	   :headline-levels 4
	   :html-extension "html"
	   :body-only t ;; Only export section between <body> </body>
	   )


	  ("org-static-blog"
	   :base-directory "~/GitHub/nickp60.github.io/math/"
	   :base-extension "css\\|js\\|png\\|jpg\\|gif\\|pdf\\|mp3\\|ogg\\|swf\\|php"
	   :publishing-directory "~/GitHub/nickp60.github.io/_posts/math/"
	   :recursive t
	   :publishing-function org-publish-attachment)

	  ("blog" :components ("org-blog" "org-static-blog"))

	  ))
#+END_SRC

* neotree
#+BEGIN_SRC emacs-lisp
  (add-to-list 'load-path "~/.emacs.d/neotree")
  (require 'neotree)
  (global-set-key [f8] 'neotree-toggle)
#+END_SRC

* We need a toggle command to switch themes

#+BEGIN_SRC emacs-lisp
  (setq darktheme 0)
  ;; Shortcut to toggle between light and dark
  (defun togglelightdark()
    "toggle between light and dark themes"
    (interactive)
    (if (eq darktheme 0)
	(progn
	  (setq darktheme 1)
	  (disable-theme 'manoj-dark)
	  (load-theme 'leuven t))
      (progn
	(setq darktheme 0)
	(disable-theme 'leuven)
	(load-theme 'manoj-dark t)))
    )

  (global-set-key (kbd "C-x a") 'togglelightdark);
#+END_SRC

* sphinx
(add-to-list 'load-path "~/.emacs.d/various/sphinx-doc.el")
(add-hook 'python-mode-hook (lambda ()
(require 'sphinx-doc)
(sphin`x-doc-mode t)))

#+BEGIN_SRC emacs-lisp
  (defun newdoc ()
    (interactive)
    (insert "\"\"\"FIXME here is where we put our description

  And a longer discription

  Args:\n    arg1 (type): definition
  Returns:\n    (str): what the result is
  Raises:\n    ValueError: thrown when arg1 is ...\n\n\"\"\"\n"))
#+END_SRC

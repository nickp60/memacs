#+Title:  My configs
* my initial .emacs file
#+BEGIN_SRC emacs-lisp
  ;; thus allows some templating for org-roam to work
  ;; -*- lexical-binding: t; -*-
  (setq TeX-command "/$HOME/bin/pdflatex")
  (set-face-attribute 'default nil :height 110)
  (custom-set-faces
   ;; custom-set-faces was added by Custom.
   ;; If you edit it by hand, you could mess it up, so be careful.
   ;; Your init file should contain only one such instance.
   ;; If there is more than one, they won't work right.
   )
  (custom-set-variables
   '(TeX-engine (quote xetex))
   '(ansi-color-names-vector ["black" "#d55e00" "#009e73" "#f8ec59" "#0072b2" "#cc79a7" "#56b4e9" "white"])
   ;; '(bar-cursor-mode nil nil (bar-cursor))
   '(custom-enabled-themes (quote (manoj-dark)))
   '(inhibit-startup-buffer-menu t)
   '(org-confirm-babel-evaluate nil)
   '(inhibit-startup-screen t))
  ;; for autocomplete
  (require 'package) ;; You might already have this line
  (add-to-list 'package-archives
	       '("melpa" . "https://melpa.org/packages/") t)
  (when (< emacs-major-version 24)
    ;; For important compatibility libraries like cl-lib
    (add-to-list 'package-archives '("gnu" . "http://elpa.gnu.org/packages/")))
  ;;actually calling it
  (ac-config-default)
	;;;;
  ;; (add-to-list 'load-path "~/.emacs.d/auto-complete-auctex")
  ;; (require 'auto-complete-auctex)
  (setq TeX-parse-self t) ; Enable parse on load. allows for bibtex auti running
  (setq TeX-auto-save t) ; Enable parse on save.
  ;;workgroups; desktop didnt save enough
  (add-to-list 'load-path "~/.emacs.d/various")
  (column-number-mode 1)

  ;; always get rid of training white space
  (add-hook 'before-save-hook 'delete-trailing-whitespace)


  ;; Setup for Flymake code checking.

  (require 'flymake)


  ;; Highlight character at "fill-column" position.
  (add-hook 'python-mode-hook #'display-fill-column-indicator-mode)

#+END_SRC


* UI preferences
*3* Disable window chrome

I don't usually use the menu or scroll bar, and they take up useful space.

#+BEGIN_SRC emacs-lisp
  (tool-bar-mode 0)
  (menu-bar-mode 1)
  (when window-system
    (scroll-bar-mode -1))
#+END_SRC



** Highlight the current line

=global-hl-line-mode= softly highlights the background color of the line
containing point. It makes it a bit easier to find point, and it's useful when
pairing or presenting code.

Also, because it remove syntax highlighting, it makes lots of other stuff a pain.

#+BEGIN_SRC emacs-lisp
    (when window-system
      (global-hl-line-mode))
#+END_SRC

#+RESULTS:




** Exporting

Allow export to markdown and beamer (for presentations).

#+BEGIN_SRC emacs-lisp
  (require 'ox-md)
  (require 'ox-beamer)
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (custom-set-faces
   '(default ((t (:height 110 :family "inconsolata")))))
#+END_SRC

#+BEGIN_SRC elisp
  ;;syntax highlight code blocks
  (setq org-src-fontify-natively t)
#+END_SRC
And lets get some color going
#+BEGIN_SRC
(require 'color)
(set-face-attribute 'org-block nil :background
                    (color-darken-name
                     (face-attribute 'default :background) 3))
(setq org-src-block-faces '(("emacs-lisp" (:background "#EEE2FF"))
                            ("python" (:background "#E5FFB8"))
                            ("sh" (:backgriynd "#AAFFBA"))))
#+END_SRC


**** Exporting to PDF

I want to produce PDFs with syntax highlighting in the code. The best way to do
that seems to be with the =minted= package, but that package shells out to
=pygments= to do the actual work. =pdflatex= usually disallows shell commands;
this enables that.

#+BEGIN_SRC emacs-lisp
  (setq org-latex-pdf-process
	'("pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
	  "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
	  "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"))
#+END_SRC

Include the =minted= package in all of my LaTeX exports.

#+BEGIN_SRC emacs-lisp
  (add-to-list 'org-latex-packages-alist '("" "minted"))
  (setq org-latex-listings 'minted)
#+END_SRC

* Set custom keybindings

Just a few handy functions.
Remap when working in terminal Emacs.

#+BEGIN_SRC emacs-lisp
  (define-key input-decode-map "\e[1;2A" [S-up])
#+END_SRC


#+BEGIN_SRC emacs-lisp
  (define-key org-mode-map "\M-q" 'toggle-truncate-lines)
#+END_SRC

* org mode babel stuff
#+BEGIN_SRC emacs-lisp
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((python . t)
     (R . t)))
#+END_SRC
#+BEGIN_SRC emacs-lisp
  (eval-after-load "org"
    '(require 'ox-gfm nil t)
    )
  (eval-after-load "org"
    '(setq org-reveal-root "file:///home/nicholas/.emacs.d/reveal.js-3.6.0/")
    )
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (require 'ox-publish)
  (setq org-publish-project-alist
	'(

	  ("org-blog"
	   ;; Path to your org files.
	   :base-directory "~/GitHub/nickp60.github.io//math/"
	   :base-extension "org"

	   ;; Path to your Jekyll project.
	   :publishing-directory "~/GitHub/nickp60.github.io/_posts/math/"
	   :recursive t
	   :publishing-function org-html-publish-to-html
	   :headline-levels 4
	   :html-extension "html"
	   :body-only t ;; Only export section between <body> </body>
	   )


	  ("org-static-blog"
	   :base-directory "~/GitHub/nickp60.github.io/math/"
	   :base-extension "css\\|js\\|png\\|jpg\\|gif\\|pdf\\|mp3\\|ogg\\|swf\\|php"
	   :publishing-directory "~/GitHub/nickp60.github.io/_posts/math/"
	   :recursive t
	   :publishing-function org-publish-attachment)

	  ("blog" :components ("org-blog" "org-static-blog"))

	  ))
#+END_SRC


* We need a toggle command to switch themes

#+BEGIN_SRC emacs-lisp
  (setq darktheme 0)
  ;; Shortcut to toggle between light and dark
  (defun togglelightdark()
    "toggle between light and dark themes"
    (interactive)
    (if (eq darktheme 0)
	(progn
	  (setq darktheme 1)
	  (disable-theme 'manoj-dark)
	  (load-theme 'leuven t))
      (progn
	(setq darktheme 0)
	(disable-theme 'leuven)
	(load-theme 'manoj-dark t)))
    )

  (global-set-key (kbd "C-x a") 'togglelightdark);
#+END_SRC

* sphinx
(add-to-list 'load-path "~/.emacs.d/various/sphinx-doc.el")
(add-hook 'python-mode-hook (lambda ()
(require 'sphinx-doc)
(sphin`x-doc-mode t)))

#+BEGIN_SRC emacs-lisp
  (defun newdoc ()
    (interactive)
    (insert "\"\"\"FIXME here is where we put our description

  And a longer discription

  Args:\n    arg1 (type): definition
  Returns:\n    (str): what the result is
  Raises:\n    ValueError: thrown when arg1 is ...\n\n\"\"\"\n"))
#+END_SRC
